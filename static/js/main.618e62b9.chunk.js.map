{"version":3,"sources":["components/TodoForm.tsx","components/TodoList.tsx","components/TodoFooter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoForm","props","ref","useRef","className","onFocus","document","getElementById","classList","add","onBlur","setTimeout","remove","type","id","autoComplete","onKeyPress","event","key","onAdd","current","value","htmlFor","onClick","TodoList","todos","onRemove","onToggle","onEdit","useState","setValues","length","inputChange","evnt","target","blurFunction","nextElementSibling","focusFunction","map","todo","clases","completed","push","join","checked","onChange","bind","title","placeholder","preventDefault","event2","parentElement","previousElementSibling","editeInput","event1","evt","contains","editHandler","removeHandler","TodoFooter","onClearCompleted","completedSize","filter","App","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","window","confirm","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.618e62b9.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\n\r\ninterface TodoFormProps {\r\n    onAdd(title: string): void\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = (props) => {\r\n\r\n    const blurFunction = () => {\r\n        setTimeout(() => {\r\n            document.getElementById(\"add_btn\")?.classList.remove(\"add_btn_focus\")\r\n        }, 80);\r\n    }\r\n    const focusFunction = () => {\r\n        document.getElementById(\"add_btn\")?.classList.add(\"add_btn_focus\")\r\n    }\r\n    const ref = useRef<HTMLInputElement>(null)\r\n    const keyPressHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === \"Enter\") {\r\n            props.onAdd(ref.current!.value)\r\n            ref.current!.value = ''\r\n        }\r\n    }\r\n    const onAddBtn = () => {\r\n        props.onAdd(ref.current!.value)\r\n        ref.current!.value = ''\r\n    }\r\n    return (\r\n        <div className=\"form_container\">\r\n            <div className=\"input-field mt2\">\r\n                <input onFocus={focusFunction} onBlur={blurFunction}\r\n                    ref={ref}\r\n                    type=\"text\"\r\n                    id=\"title\"\r\n                    autoComplete=\"off\"\r\n                    onKeyPress={keyPressHandler}\r\n                    className=\"materialize-textarea add_input\" />\r\n                <label htmlFor=\"title\" className=\"active\">What needs to be done?</label>\r\n            </div>\r\n            <button id=\"add_btn\" className=\"add_btn\" onClick={onAddBtn}>\r\n                <i className=\"material-icons red-text\">add_box</i>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import { title } from \"process\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport { ITodo } from \"../interfaces\";\r\n\r\ntype TodoListProps = {\r\n    todos: ITodo[]\r\n    onToggle(id: number): void\r\n    onRemove(id: number): void\r\n    onEdit(title: string, id: number): void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({ todos, onRemove, onToggle, onEdit }) => {\r\n    const ref = useRef<HTMLInputElement>(null)\r\n    const [value, setValues] = useState('')\r\n    if (todos.length === 0) {\r\n        return <p className=\"center\">While no affairs</p>\r\n    }\r\n    const removeHandler = (event: React.MouseEvent, id: number) => {\r\n        event.preventDefault()\r\n        onRemove(id)\r\n    }\r\n\r\n    const editHandler = (event: React.MouseEvent, id: number, title: string) => {\r\n        event.preventDefault()\r\n        const evt = event.target as HTMLElement\r\n\r\n        if (evt.parentElement?.previousElementSibling?.classList.contains(\"form_display\")) {\r\n            evt.parentElement?.previousElementSibling?.classList.remove(\"form_display\")\r\n        }\r\n        else {\r\n            evt.parentElement?.previousElementSibling?.classList.add(\"form_display\")\r\n        }\r\n        if (evt.parentElement?.previousElementSibling?.previousElementSibling?.classList.contains(\"display_title\")) {\r\n            evt.parentElement?.previousElementSibling?.previousElementSibling?.classList.remove(\"display_title\")\r\n        }\r\n        else {\r\n            evt.parentElement?.previousElementSibling?.previousElementSibling?.classList.add(\"display_title\")\r\n        }\r\n    }\r\n    const inputChange = (event: React.ChangeEvent) => {\r\n        const evnt = event.target as HTMLInputElement\r\n        setValues(evnt.value)\r\n    }\r\n    const editeInput = (event: React.MouseEvent, id: number, title: string) => {\r\n        event.preventDefault()\r\n        title = value\r\n        onEdit(title, id)\r\n        const event2 = event.target as HTMLElement\r\n        event2.parentElement?.classList.remove(\"form_display\")\r\n        event2.parentElement?.previousElementSibling?.classList.remove(\"display_title\")\r\n    }\r\n    const blurFunction = (event: any) => {\r\n        setTimeout(() => {\r\n            const ev = event.target as HTMLElement\r\n            ev.nextElementSibling?.classList.remove(\"add_btn_focus\")\r\n        }, 80);\r\n    }\r\n    const focusFunction = (event: any) => {\r\n        const evn = event.target as HTMLElement\r\n        evn.nextElementSibling?.classList.add(\"add_btn_focus\")\r\n    }\r\n    return (\r\n        <ul>\r\n            {todos.map(todo => {\r\n\r\n                const clases = ['todo']\r\n                if (todo.completed === true) {\r\n                    clases.push('completed')\r\n                }\r\n\r\n                return (\r\n                    <li className={clases.join(' ')} key={todo.id}>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={todo.completed}\r\n                                onChange={onToggle.bind(null, todo.id)} />\r\n                            <span className=\"scroolbar_span\">\r\n                                <div className=\"content_box\"><span className=\"todo_title\">{todo.title}</span></div>\r\n                            </span>\r\n                            <form className=\"edit_form\">\r\n                                <input onFocus={focusFunction} onBlur={blurFunction} className=\"materialize-textarea edit_input\" type=\"text\" onChange={inputChange} placeholder={todo.title} />\r\n                                <button id=\"save_btn\" className=\"material-icons red-text save_btn\" onClick={event => editeInput(event, todo.id, title)}>save</button>\r\n                            </form>\r\n                            <div>\r\n                                <i className=\"material-icons red-text edit_icon\" onClick={event1 => editHandler(event1, todo.id, title)}>edit</i>\r\n                                <i className=\"material-icons red-text\" onClick={event => removeHandler(event, todo.id)}>delete</i>\r\n                            </div>\r\n                        </label>\r\n                    </li>\r\n                )\r\n            })}\r\n\r\n        </ul>\r\n    )\r\n}","import React from \"react\";\r\nimport { ITodo } from \"../interfaces\";\r\n\r\ntype TodoFooterProps = {\r\n    todos: ITodo[]\r\n    onClearCompleted: any\r\n}\r\n\r\nexport const TodoFooter: React.FC<TodoFooterProps> = ({ todos, onClearCompleted }) => {\r\n    const completedSize = todos.filter((todo) => todo.completed).length;\r\n    return (\r\n        <div className=\"todo_footer\">\r\n            <span>{todos.length} / {completedSize}</span>\r\n            <div className=\"clear_all_block\">\r\n                <p className=\"clear_all_text red-text\">Clear completed</p>\r\n                <i className=\"material-icons red-text clear_all_icon\" onClick={onClearCompleted}>clear</i>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport { TodoForm } from './components/TodoForm';\nimport { useState, useEffect } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { ITodo } from './interfaces';\nimport useFetch from 'use-http'\nimport { TodoFooter } from './components/TodoFooter';\nfunction App() {\n  const [todos, setTodos] = useState<ITodo[]>([])\n\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[]\n    setTodos(saved)\n  }, [])\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }, [todos])\n  const addHandler = (title: string) => {\n    if (title !== \"\") {\n      const newTodo: ITodo = {\n        title: title,\n        id: Date.now(),\n        completed: false\n      }\n      setTodos(prev => [newTodo, ...prev])\n    }\n  }\n  const toggleHandler = (id: number) => {\n    setTodos(prev => prev.map(todo => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed\n        }\n      }\n\n      return todo\n\n    }))\n  }\n  const editHandler = (title: string, id: number) => {\n   console.log(title);\n   setTodos(prev => prev.map(todo => {\n    if (todo.id === id) {\n      return {\n        ...todo,\n        title: title\n      }\n    }\n\n    return todo\n\n  }))\n  }\n\n  const removeHandler = (id: number) => {\n    const shoudRemove = window.confirm(\"Are you sure want to delete the item?\");\n    if (shoudRemove === true) {\n      setTodos(prev => prev.filter(todo => todo.id !== id))\n    }\n  }\n  const onClearCompleted = () => {\n    const nocomplArr = todos.filter((todo) => todo.completed)\n    if (nocomplArr.length !== 0) {\n      const shoudRemove = window.confirm(\"Are you you want to delete the items?\");\n      if (shoudRemove === true) {\n        setTodos(todos.filter((todo) => !todo.completed))\n      }\n    }\n  }\n  return <>\n    <div className=\"container\">\n      <TodoForm onAdd={addHandler} />\n\n      <TodoList\n        todos={todos}\n        onToggle={toggleHandler}\n        onRemove={removeHandler}\n        onEdit={editHandler}\n      />\n      <TodoFooter\n        todos={todos}\n        onClearCompleted={onClearCompleted}\n      />\n    </div>\n  </>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}